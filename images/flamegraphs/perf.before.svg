<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="310.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="293" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="293" > </text>
<g id="frames">
<g >
<title>gb_getchar (2 samples, 0.30%)</title><rect x="42.0" y="117" width="3.5" height="15.0" fill="rgb(236,37,44)" rx="2" ry="2" />
<text  x="44.99" y="127.5" ></text>
</g>
<g >
<title>gb_pos_to_linecol (1 samples, 0.15%)</title><rect x="1134.9" y="133" width="1.8" height="15.0" fill="rgb(205,163,5)" rx="2" ry="2" />
<text  x="1137.91" y="143.5" ></text>
</g>
<g >
<title>compile_branch (4 samples, 0.60%)</title><rect x="568.0" y="69" width="7.1" height="15.0" fill="rgb(235,148,28)" rx="2" ry="2" />
<text  x="571.01" y="79.5" ></text>
</g>
<g >
<title>gb_index (2 samples, 0.30%)</title><rect x="491.6" y="69" width="3.6" height="15.0" fill="rgb(254,75,50)" rx="2" ry="2" />
<text  x="494.60" y="79.5" ></text>
</g>
<g >
<title>gb_startswith_at (8 samples, 1.20%)</title><rect x="633.8" y="69" width="14.2" height="15.0" fill="rgb(243,39,27)" rx="2" ry="2" />
<text  x="636.77" y="79.5" ></text>
</g>
<g >
<title>tb_utf8_char_to_unicode (1 samples, 0.15%)</title><rect x="1184.7" y="213" width="1.7" height="15.0" fill="rgb(230,80,49)" rx="2" ry="2" />
<text  x="1187.67" y="223.5" ></text>
</g>
<g >
<title>editor_create_and_open (1 samples, 0.15%)</title><rect x="36.7" y="181" width="1.7" height="15.0" fill="rgb(252,216,16)" rx="2" ry="2" />
<text  x="39.66" y="191.5" ></text>
</g>
<g >
<title>gb_utf8len_line (37 samples, 5.57%)</title><rect x="498.7" y="117" width="65.8" height="15.0" fill="rgb(221,82,32)" rx="2" ry="2" />
<text  x="501.70" y="127.5" >gb_utf8..</text>
</g>
<g >
<title>gb_getchar (1 samples, 0.15%)</title><rect x="489.8" y="101" width="1.8" height="15.0" fill="rgb(223,214,15)" rx="2" ry="2" />
<text  x="492.82" y="111.5" ></text>
</g>
<g >
<title>gb_pos_to_linecol (15 samples, 2.26%)</title><rect x="1108.3" y="101" width="26.6" height="15.0" fill="rgb(206,2,12)" rx="2" ry="2" />
<text  x="1111.25" y="111.5" >g..</text>
</g>
<g >
<title>tb_utf8_char_length (1 samples, 0.15%)</title><rect x="562.7" y="101" width="1.8" height="15.0" fill="rgb(228,157,53)" rx="2" ry="2" />
<text  x="565.68" y="111.5" ></text>
</g>
<g >
<title>gb_utf8len (18 samples, 2.71%)</title><rect x="443.6" y="101" width="32.0" height="15.0" fill="rgb(244,123,32)" rx="2" ry="2" />
<text  x="446.61" y="111.5" >gb..</text>
</g>
<g >
<title>_pcre2_strlen_8 (7 samples, 1.05%)</title><rect x="736.8" y="53" width="12.5" height="15.0" fill="rgb(223,132,23)" rx="2" ry="2" />
<text  x="739.84" y="63.5" ></text>
</g>
<g >
<title>gb_index (1 samples, 0.15%)</title><rect x="43.8" y="101" width="1.7" height="15.0" fill="rgb(240,51,52)" rx="2" ry="2" />
<text  x="46.77" y="111.5" ></text>
</g>
<g >
<title>__libc_start_main (642 samples, 96.69%)</title><rect x="36.7" y="213" width="1140.9" height="15.0" fill="rgb(243,180,20)" rx="2" ry="2" />
<text  x="39.66" y="223.5" >__libc_start_main</text>
</g>
<g >
<title>match (196 samples, 29.52%)</title><rect x="749.3" y="53" width="348.3" height="15.0" fill="rgb(224,132,30)" rx="2" ry="2" />
<text  x="752.28" y="63.5" >match</text>
</g>
<g >
<title>gb_index (3 samples, 0.45%)</title><rect x="623.1" y="69" width="5.3" height="15.0" fill="rgb(241,86,21)" rx="2" ry="2" />
<text  x="626.10" y="79.5" ></text>
</g>
<g >
<title>editor_draw (618 samples, 93.07%)</title><rect x="38.4" y="181" width="1098.3" height="15.0" fill="rgb(214,139,26)" rx="2" ry="2" />
<text  x="41.43" y="191.5" >editor_draw</text>
</g>
<g >
<title>tb_utf8_char_to_unicode (1 samples, 0.15%)</title><rect x="1104.7" y="117" width="1.8" height="15.0" fill="rgb(221,200,30)" rx="2" ry="2" />
<text  x="1107.70" y="127.5" ></text>
</g>
<g >
<title>[unknown] (12 samples, 1.81%)</title><rect x="10.0" y="213" width="21.3" height="15.0" fill="rgb(230,208,2)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >[..</text>
</g>
<g >
<title>badavi (664 samples, 100.00%)</title><rect x="10.0" y="245" width="1180.0" height="15.0" fill="rgb(210,63,38)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >badavi</text>
</g>
<g >
<title>parse_regex (2 samples, 0.30%)</title><rect x="575.1" y="85" width="3.6" height="15.0" fill="rgb(250,214,22)" rx="2" ry="2" />
<text  x="578.12" y="95.5" ></text>
</g>
<g >
<title>tb_render (2 samples, 0.30%)</title><rect x="10.0" y="197" width="3.6" height="15.0" fill="rgb(224,77,13)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>manage_callouts (1 samples, 0.15%)</title><rect x="576.9" y="69" width="1.8" height="15.0" fill="rgb(248,175,46)" rx="2" ry="2" />
<text  x="579.90" y="79.5" ></text>
</g>
<g >
<title>[unknown] (662 samples, 99.70%)</title><rect x="10.0" y="229" width="1176.4" height="15.0" fill="rgb(211,90,11)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >[unknown]</text>
</g>
<g >
<title>all (664 samples, 100%)</title><rect x="10.0" y="261" width="1180.0" height="15.0" fill="rgb(224,132,31)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (17 samples, 2.56%)</title><rect x="706.6" y="53" width="30.2" height="15.0" fill="rgb(236,7,11)" rx="2" ry="2" />
<text  x="709.63" y="63.5" >__..</text>
</g>
<g >
<title>motion_apply (21 samples, 3.16%)</title><rect x="1136.7" y="149" width="37.3" height="15.0" fill="rgb(247,79,2)" rx="2" ry="2" />
<text  x="1139.69" y="159.5" >mot..</text>
</g>
<g >
<title>gb_linecol_to_pos (10 samples, 1.51%)</title><rect x="1136.7" y="117" width="17.8" height="15.0" fill="rgb(232,39,18)" rx="2" ry="2" />
<text  x="1139.69" y="127.5" ></text>
</g>
<g >
<title>editor_handle_key_press (21 samples, 3.16%)</title><rect x="1136.7" y="181" width="37.3" height="15.0" fill="rgb(206,221,11)" rx="2" ry="2" />
<text  x="1139.69" y="191.5" >edi..</text>
</g>
<g >
<title>find_minlength (1 samples, 0.15%)</title><rect x="566.2" y="53" width="1.8" height="15.0" fill="rgb(240,169,8)" rx="2" ry="2" />
<text  x="569.23" y="63.5" ></text>
</g>
<g >
<title>gb_getchar (2 samples, 0.30%)</title><rect x="440.1" y="101" width="3.5" height="15.0" fill="rgb(239,102,7)" rx="2" ry="2" />
<text  x="443.06" y="111.5" ></text>
</g>
<g >
<title>is_word_char (6 samples, 0.90%)</title><rect x="648.0" y="69" width="10.6" height="15.0" fill="rgb(210,56,19)" rx="2" ry="2" />
<text  x="650.98" y="79.5" ></text>
</g>
<g >
<title>pcre2_match_8 (247 samples, 37.20%)</title><rect x="658.6" y="69" width="439.0" height="15.0" fill="rgb(224,156,24)" rx="2" ry="2" />
<text  x="661.64" y="79.5" >pcre2_match_8</text>
</g>
<g >
<title>gb_getchar (2 samples, 0.30%)</title><rect x="1097.6" y="85" width="3.5" height="15.0" fill="rgb(225,39,17)" rx="2" ry="2" />
<text  x="1100.59" y="95.5" ></text>
</g>
<g >
<title>tb_cell (1 samples, 0.15%)</title><rect x="1188.2" y="229" width="1.8" height="15.0" fill="rgb(226,14,25)" rx="2" ry="2" />
<text  x="1191.22" y="239.5" ></text>
</g>
<g >
<title>gb_index (1 samples, 0.15%)</title><rect x="473.8" y="85" width="1.8" height="15.0" fill="rgb(226,169,5)" rx="2" ry="2" />
<text  x="476.83" y="95.5" ></text>
</g>
<g >
<title>gb_getchar (2 samples, 0.30%)</title><rect x="491.6" y="85" width="3.6" height="15.0" fill="rgb(205,4,37)" rx="2" ry="2" />
<text  x="494.60" y="95.5" ></text>
</g>
<g >
<title>gb_utf8 (3 samples, 0.45%)</title><rect x="489.8" y="117" width="5.4" height="15.0" fill="rgb(241,121,13)" rx="2" ry="2" />
<text  x="492.82" y="127.5" ></text>
</g>
<g >
<title>gb_index (6 samples, 0.90%)</title><rect x="463.2" y="69" width="10.6" height="15.0" fill="rgb(245,151,8)" rx="2" ry="2" />
<text  x="466.16" y="79.5" ></text>
</g>
<g >
<title>wcwidth (10 samples, 1.51%)</title><rect x="13.6" y="197" width="17.7" height="15.0" fill="rgb(251,172,28)" rx="2" ry="2" />
<text  x="16.55" y="207.5" ></text>
</g>
<g >
<title>gb_utf8len (2 samples, 0.30%)</title><rect x="491.6" y="101" width="3.6" height="15.0" fill="rgb(215,190,4)" rx="2" ry="2" />
<text  x="494.60" y="111.5" ></text>
</g>
<g >
<title>compile_regex (4 samples, 0.60%)</title><rect x="568.0" y="85" width="7.1" height="15.0" fill="rgb(211,121,36)" rx="2" ry="2" />
<text  x="571.01" y="95.5" ></text>
</g>
<g >
<title>_pcre2_study_8 (1 samples, 0.15%)</title><rect x="566.2" y="85" width="1.8" height="15.0" fill="rgb(214,80,18)" rx="2" ry="2" />
<text  x="569.23" y="95.5" ></text>
</g>
<g >
<title>tb_clear_buffer (2 samples, 0.30%)</title><rect x="1174.0" y="181" width="3.6" height="15.0" fill="rgb(206,99,5)" rx="2" ry="2" />
<text  x="1177.01" y="191.5" ></text>
</g>
<g >
<title>window_draw_leaf (617 samples, 92.92%)</title><rect x="38.4" y="133" width="1096.5" height="15.0" fill="rgb(220,185,23)" rx="2" ry="2" />
<text  x="41.43" y="143.5" >window_draw_leaf</text>
</g>
<g >
<title>strcmp (1 samples, 0.15%)</title><rect x="1179.3" y="213" width="1.8" height="15.0" fill="rgb(222,223,16)" rx="2" ry="2" />
<text  x="1182.34" y="223.5" ></text>
</g>
<g >
<title>gb_getchar (4 samples, 0.60%)</title><rect x="498.7" y="101" width="7.1" height="15.0" fill="rgb(228,142,0)" rx="2" ry="2" />
<text  x="501.70" y="111.5" ></text>
</g>
<g >
<title>gb_size (3 samples, 0.45%)</title><rect x="628.4" y="69" width="5.4" height="15.0" fill="rgb(248,103,51)" rx="2" ry="2" />
<text  x="631.43" y="79.5" ></text>
</g>
<g >
<title>normal_mode_key_pressed (21 samples, 3.16%)</title><rect x="1136.7" y="165" width="37.3" height="15.0" fill="rgb(245,74,17)" rx="2" ry="2" />
<text  x="1139.69" y="175.5" >nor..</text>
</g>
<g >
<title>gb_index (3 samples, 0.45%)</title><rect x="500.5" y="85" width="5.3" height="15.0" fill="rgb(224,142,53)" rx="2" ry="2" />
<text  x="503.48" y="95.5" ></text>
</g>
<g >
<title>malloc (1 samples, 0.15%)</title><rect x="1186.4" y="229" width="1.8" height="15.0" fill="rgb(235,135,25)" rx="2" ry="2" />
<text  x="1189.45" y="239.5" ></text>
</g>
<g >
<title>_IO_str_init_static_internal (1 samples, 0.15%)</title><rect x="31.3" y="213" width="1.8" height="15.0" fill="rgb(235,155,34)" rx="2" ry="2" />
<text  x="34.33" y="223.5" ></text>
</g>
<g >
<title>gb_index (1 samples, 0.15%)</title><rect x="489.8" y="85" width="1.8" height="15.0" fill="rgb(234,127,2)" rx="2" ry="2" />
<text  x="492.82" y="95.5" ></text>
</g>
<g >
<title>pcre2_compile_8 (7 samples, 1.05%)</title><rect x="566.2" y="101" width="12.5" height="15.0" fill="rgb(249,50,15)" rx="2" ry="2" />
<text  x="569.23" y="111.5" ></text>
</g>
<g >
<title>tb_utf8_char_length (1 samples, 0.15%)</title><rect x="1182.9" y="213" width="1.8" height="15.0" fill="rgb(235,115,13)" rx="2" ry="2" />
<text  x="1185.89" y="223.5" ></text>
</g>
<g >
<title>gb_index (1 samples, 0.15%)</title><rect x="560.9" y="69" width="1.8" height="15.0" fill="rgb(246,69,3)" rx="2" ry="2" />
<text  x="563.90" y="79.5" ></text>
</g>
<g >
<title>window_draw_line_number (15 samples, 2.26%)</title><rect x="1108.3" y="117" width="26.6" height="15.0" fill="rgb(227,138,4)" rx="2" ry="2" />
<text  x="1111.25" y="127.5" >w..</text>
</g>
<g >
<title>__memchr_avx2 (1 samples, 0.15%)</title><rect x="36.7" y="149" width="1.7" height="15.0" fill="rgb(217,116,4)" rx="2" ry="2" />
<text  x="39.66" y="159.5" ></text>
</g>
<g >
<title>pcre2_match_8 (1 samples, 0.15%)</title><rect x="1102.9" y="85" width="1.8" height="15.0" fill="rgb(234,30,25)" rx="2" ry="2" />
<text  x="1105.92" y="95.5" ></text>
</g>
<g >
<title>__ctype_b_loc (1 samples, 0.15%)</title><rect x="596.4" y="69" width="1.8" height="15.0" fill="rgb(248,215,22)" rx="2" ry="2" />
<text  x="599.45" y="79.5" ></text>
</g>
<g >
<title>find_minlength (1 samples, 0.15%)</title><rect x="566.2" y="69" width="1.8" height="15.0" fill="rgb(250,18,43)" rx="2" ry="2" />
<text  x="569.23" y="79.5" ></text>
</g>
<g >
<title>main (642 samples, 96.69%)</title><rect x="36.7" y="197" width="1140.9" height="15.0" fill="rgb(216,26,49)" rx="2" ry="2" />
<text  x="39.66" y="207.5" >main</text>
</g>
<g >
<title>__select (1 samples, 0.15%)</title><rect x="1177.6" y="213" width="1.7" height="15.0" fill="rgb(218,78,51)" rx="2" ry="2" />
<text  x="1180.56" y="223.5" ></text>
</g>
<g >
<title>window_scroll (1 samples, 0.15%)</title><rect x="1134.9" y="149" width="1.8" height="15.0" fill="rgb(212,98,53)" rx="2" ry="2" />
<text  x="1137.91" y="159.5" ></text>
</g>
<g >
<title>window_draw (617 samples, 92.92%)</title><rect x="38.4" y="149" width="1096.5" height="15.0" fill="rgb(214,70,22)" rx="2" ry="2" />
<text  x="41.43" y="159.5" >window_draw</text>
</g>
<g >
<title>token_color (1 samples, 0.15%)</title><rect x="1106.5" y="117" width="1.8" height="15.0" fill="rgb(216,206,42)" rx="2" ry="2" />
<text  x="1109.48" y="127.5" ></text>
</g>
<g >
<title>compile_regex (4 samples, 0.60%)</title><rect x="568.0" y="53" width="7.1" height="15.0" fill="rgb(243,130,51)" rx="2" ry="2" />
<text  x="571.01" y="63.5" ></text>
</g>
<g >
<title>gb_getchar (12 samples, 1.81%)</title><rect x="452.5" y="85" width="21.3" height="15.0" fill="rgb(247,166,33)" rx="2" ry="2" />
<text  x="455.50" y="95.5" >g..</text>
</g>
<g >
<title>editor_draw_window (618 samples, 93.07%)</title><rect x="38.4" y="165" width="1098.3" height="15.0" fill="rgb(240,144,20)" rx="2" ry="2" />
<text  x="41.43" y="175.5" >editor_draw_window</text>
</g>
<g >
<title>default_malloc (1 samples, 0.15%)</title><rect x="564.5" y="101" width="1.7" height="15.0" fill="rgb(206,41,30)" rx="2" ry="2" />
<text  x="567.46" y="111.5" ></text>
</g>
<g >
<title>c_token_at (295 samples, 44.43%)</title><rect x="580.5" y="101" width="524.2" height="15.0" fill="rgb(242,123,11)" rx="2" ry="2" />
<text  x="583.45" y="111.5" >c_token_at</text>
</g>
<g >
<title>c_next_token (1 samples, 0.15%)</title><rect x="578.7" y="101" width="1.8" height="15.0" fill="rgb(210,64,1)" rx="2" ry="2" />
<text  x="581.67" y="111.5" ></text>
</g>
<g >
<title>syntax_init (8 samples, 1.20%)</title><rect x="564.5" y="117" width="14.2" height="15.0" fill="rgb(242,53,42)" rx="2" ry="2" />
<text  x="567.46" y="127.5" ></text>
</g>
<g >
<title>gb_pos_to_linecol (11 samples, 1.66%)</title><rect x="1154.5" y="117" width="19.5" height="15.0" fill="rgb(217,139,53)" rx="2" ry="2" />
<text  x="1157.46" y="127.5" ></text>
</g>
<g >
<title>__strchrnul_avx2 (2 samples, 0.30%)</title><rect x="33.1" y="197" width="3.6" height="15.0" fill="rgb(225,16,17)" rx="2" ry="2" />
<text  x="36.10" y="207.5" ></text>
</g>
<g >
<title>down (21 samples, 3.16%)</title><rect x="1136.7" y="133" width="37.3" height="15.0" fill="rgb(237,110,29)" rx="2" ry="2" />
<text  x="1139.69" y="143.5" >down</text>
</g>
<g >
<title>__ctype_b_loc (1 samples, 0.15%)</title><rect x="582.2" y="85" width="1.8" height="15.0" fill="rgb(208,221,31)" rx="2" ry="2" />
<text  x="585.23" y="95.5" ></text>
</g>
<g >
<title>gb_linecol_to_pos (250 samples, 37.65%)</title><rect x="45.5" y="117" width="444.3" height="15.0" fill="rgb(248,123,7)" rx="2" ry="2" />
<text  x="48.54" y="127.5" >gb_linecol_to_pos</text>
</g>
<g >
<title>gb_utf8len (2 samples, 0.30%)</title><rect x="559.1" y="101" width="3.6" height="15.0" fill="rgb(209,64,32)" rx="2" ry="2" />
<text  x="562.13" y="111.5" ></text>
</g>
<g >
<title>gb_linecol_to_pos (30 samples, 4.52%)</title><rect x="505.8" y="101" width="53.3" height="15.0" fill="rgb(232,226,8)" rx="2" ry="2" />
<text  x="508.81" y="111.5" >gb_li..</text>
</g>
<g >
<title>_IO_vsnprintf (2 samples, 0.30%)</title><rect x="33.1" y="213" width="3.6" height="15.0" fill="rgb(246,227,3)" rx="2" ry="2" />
<text  x="36.10" y="223.5" ></text>
</g>
<g >
<title>gb_index (4 samples, 0.60%)</title><rect x="616.0" y="53" width="7.1" height="15.0" fill="rgb(238,13,26)" rx="2" ry="2" />
<text  x="618.99" y="63.5" ></text>
</g>
<g >
<title>tags_create (1 samples, 0.15%)</title><rect x="36.7" y="165" width="1.7" height="15.0" fill="rgb(222,95,32)" rx="2" ry="2" />
<text  x="39.66" y="175.5" ></text>
</g>
<g >
<title>gb_index (1 samples, 0.15%)</title><rect x="610.7" y="53" width="1.7" height="15.0" fill="rgb(230,187,22)" rx="2" ry="2" />
<text  x="613.66" y="63.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (2 samples, 0.30%)</title><rect x="598.2" y="69" width="3.6" height="15.0" fill="rgb(222,200,35)" rx="2" ry="2" />
<text  x="601.22" y="79.5" ></text>
</g>
<g >
<title>gb_utf8len (2 samples, 0.30%)</title><rect x="495.2" y="117" width="3.5" height="15.0" fill="rgb(216,65,53)" rx="2" ry="2" />
<text  x="498.15" y="127.5" ></text>
</g>
<g >
<title>tb_utf8_char_length (8 samples, 1.20%)</title><rect x="475.6" y="101" width="14.2" height="15.0" fill="rgb(226,67,31)" rx="2" ry="2" />
<text  x="478.60" y="111.5" ></text>
</g>
<g >
<title>strlen (1 samples, 0.15%)</title><rect x="1181.1" y="213" width="1.8" height="15.0" fill="rgb(219,4,21)" rx="2" ry="2" />
<text  x="1184.11" y="223.5" ></text>
</g>
<g >
<title>c_next_token (289 samples, 43.52%)</title><rect x="584.0" y="85" width="513.6" height="15.0" fill="rgb(216,22,14)" rx="2" ry="2" />
<text  x="587.01" y="95.5" >c_next_token</text>
</g>
<g >
<title>gb_indexof (1 samples, 0.15%)</title><rect x="1101.1" y="85" width="1.8" height="15.0" fill="rgb(223,134,23)" rx="2" ry="2" />
<text  x="1104.14" y="95.5" ></text>
</g>
<g >
<title>syntax_token_at (296 samples, 44.58%)</title><rect x="578.7" y="117" width="526.0" height="15.0" fill="rgb(233,180,8)" rx="2" ry="2" />
<text  x="581.67" y="127.5" >syntax_token_at</text>
</g>
<g >
<title>gb_getstring_into (6 samples, 0.90%)</title><rect x="612.4" y="69" width="10.7" height="15.0" fill="rgb(237,54,39)" rx="2" ry="2" />
<text  x="615.44" y="79.5" ></text>
</g>
<g >
<title>gb_getchar (2 samples, 0.30%)</title><rect x="559.1" y="85" width="3.6" height="15.0" fill="rgb(254,114,26)" rx="2" ry="2" />
<text  x="562.13" y="95.5" ></text>
</g>
<g >
<title>gb_getchar (2 samples, 0.30%)</title><rect x="644.4" y="53" width="3.6" height="15.0" fill="rgb(232,187,45)" rx="2" ry="2" />
<text  x="647.43" y="63.5" ></text>
</g>
<g >
<title>compile_branch (3 samples, 0.45%)</title><rect x="569.8" y="37" width="5.3" height="15.0" fill="rgb(220,222,0)" rx="2" ry="2" />
<text  x="572.79" y="47.5" ></text>
</g>
<g >
<title>gb_getchar (6 samples, 0.90%)</title><rect x="601.8" y="69" width="10.6" height="15.0" fill="rgb(239,5,49)" rx="2" ry="2" />
<text  x="604.78" y="79.5" ></text>
</g>
</g>
</svg>
