<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="310.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="293" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="293" > </text>
<g id="frames">
<g >
<title>compare_opcodes (1 samples, 0.23%)</title><rect x="1179.3" y="85" width="2.7" height="15.0" fill="rgb(206,71,16)" rx="2" ry="2" />
<text  x="1182.35" y="95.5" ></text>
</g>
<g >
<title>gb_getchar (1 samples, 0.23%)</title><rect x="57.9" y="133" width="2.7" height="15.0" fill="rgb(224,206,52)" rx="2" ry="2" />
<text  x="60.95" y="143.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.23%)</title><rect x="132.5" y="69" width="2.7" height="15.0" fill="rgb(237,99,22)" rx="2" ry="2" />
<text  x="135.53" y="79.5" ></text>
</g>
<g >
<title>editor_create_and_open (1 samples, 0.23%)</title><rect x="55.3" y="181" width="2.6" height="15.0" fill="rgb(237,139,39)" rx="2" ry="2" />
<text  x="58.28" y="191.5" ></text>
</g>
<g >
<title>gb_utf8 (5 samples, 1.13%)</title><rect x="65.9" y="117" width="13.4" height="15.0" fill="rgb(214,62,12)" rx="2" ry="2" />
<text  x="68.94" y="127.5" ></text>
</g>
<g >
<title>_pcre2_strlen_8 (14 samples, 3.16%)</title><rect x="340.3" y="53" width="37.3" height="15.0" fill="rgb(208,171,3)" rx="2" ry="2" />
<text  x="343.29" y="63.5" >_pc..</text>
</g>
<g >
<title>editor_draw (399 samples, 90.07%)</title><rect x="57.9" y="181" width="1062.8" height="15.0" fill="rgb(238,72,0)" rx="2" ry="2" />
<text  x="60.95" y="191.5" >editor_draw</text>
</g>
<g >
<title>window_draw_line_number (17 samples, 3.84%)</title><rect x="1067.5" y="117" width="45.3" height="15.0" fill="rgb(209,88,8)" rx="2" ry="2" />
<text  x="1070.47" y="127.5" >wind..</text>
</g>
<g >
<title>c_next_token (359 samples, 81.04%)</title><rect x="103.2" y="85" width="956.3" height="15.0" fill="rgb(232,4,45)" rx="2" ry="2" />
<text  x="106.23" y="95.5" >c_next_token</text>
</g>
<g >
<title>syntax_token_at (363 samples, 81.94%)</title><rect x="100.6" y="117" width="966.9" height="15.0" fill="rgb(225,81,47)" rx="2" ry="2" />
<text  x="103.56" y="127.5" >syntax_token_at</text>
</g>
<g >
<title>tags_load (1 samples, 0.23%)</title><rect x="55.3" y="149" width="2.6" height="15.0" fill="rgb(251,186,38)" rx="2" ry="2" />
<text  x="58.28" y="159.5" ></text>
</g>
<g >
<title>find_minlength (1 samples, 0.23%)</title><rect x="89.9" y="53" width="2.7" height="15.0" fill="rgb(247,210,5)" rx="2" ry="2" />
<text  x="92.91" y="63.5" ></text>
</g>
<g >
<title>pcre2_compile_8 (4 samples, 0.90%)</title><rect x="89.9" y="101" width="10.7" height="15.0" fill="rgb(217,206,35)" rx="2" ry="2" />
<text  x="92.91" y="111.5" ></text>
</g>
<g >
<title>gb_pos_to_linecol (1 samples, 0.23%)</title><rect x="1112.8" y="133" width="2.6" height="15.0" fill="rgb(247,216,15)" rx="2" ry="2" />
<text  x="1115.75" y="143.5" ></text>
</g>
<g >
<title>editor_source (1 samples, 0.23%)</title><rect x="1179.3" y="181" width="2.7" height="15.0" fill="rgb(223,21,34)" rx="2" ry="2" />
<text  x="1182.35" y="191.5" ></text>
</g>
<g >
<title>gb_utf8len (3 samples, 0.68%)</title><rect x="68.6" y="101" width="8.0" height="15.0" fill="rgb(246,79,49)" rx="2" ry="2" />
<text  x="71.60" y="111.5" ></text>
</g>
<g >
<title>all (443 samples, 100%)</title><rect x="10.0" y="261" width="1180.0" height="15.0" fill="rgb(219,119,14)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>c_token_at (363 samples, 81.94%)</title><rect x="100.6" y="101" width="966.9" height="15.0" fill="rgb(248,13,36)" rx="2" ry="2" />
<text  x="103.56" y="111.5" >c_token_at</text>
</g>
<g >
<title>find_minlength (1 samples, 0.23%)</title><rect x="89.9" y="69" width="2.7" height="15.0" fill="rgb(225,94,18)" rx="2" ry="2" />
<text  x="92.91" y="79.5" ></text>
</g>
<g >
<title>do_lookup_x (1 samples, 0.23%)</title><rect x="1187.3" y="229" width="2.7" height="15.0" fill="rgb(212,134,40)" rx="2" ry="2" />
<text  x="1190.34" y="239.5" ></text>
</g>
<g >
<title>tb_utf8_char_length (1 samples, 0.23%)</title><rect x="87.2" y="101" width="2.7" height="15.0" fill="rgb(218,154,9)" rx="2" ry="2" />
<text  x="90.25" y="111.5" ></text>
</g>
<g >
<title>down (22 samples, 4.97%)</title><rect x="1120.7" y="133" width="58.6" height="15.0" fill="rgb(231,127,24)" rx="2" ry="2" />
<text  x="1123.74" y="143.5" >down</text>
</g>
<g >
<title>wcwidth (10 samples, 2.26%)</title><rect x="26.0" y="197" width="26.6" height="15.0" fill="rgb(215,90,38)" rx="2" ry="2" />
<text  x="28.98" y="207.5" >w..</text>
</g>
<g >
<title>editor_execute_command (1 samples, 0.23%)</title><rect x="1179.3" y="165" width="2.7" height="15.0" fill="rgb(221,192,6)" rx="2" ry="2" />
<text  x="1182.35" y="175.5" ></text>
</g>
<g >
<title>window_scroll (2 samples, 0.45%)</title><rect x="1115.4" y="149" width="5.3" height="15.0" fill="rgb(222,64,7)" rx="2" ry="2" />
<text  x="1118.42" y="159.5" ></text>
</g>
<g >
<title>gb_index (2 samples, 0.45%)</title><rect x="153.8" y="53" width="5.4" height="15.0" fill="rgb(244,28,26)" rx="2" ry="2" />
<text  x="156.84" y="63.5" ></text>
</g>
<g >
<title>tb_clear_buffer (2 samples, 0.45%)</title><rect x="1182.0" y="181" width="5.3" height="15.0" fill="rgb(217,86,34)" rx="2" ry="2" />
<text  x="1185.01" y="191.5" ></text>
</g>
<g >
<title>gb_size (6 samples, 1.35%)</title><rect x="169.8" y="69" width="16.0" height="15.0" fill="rgb(239,42,25)" rx="2" ry="2" />
<text  x="172.82" y="79.5" ></text>
</g>
<g >
<title>gb_getchar (3 samples, 0.68%)</title><rect x="68.6" y="85" width="8.0" height="15.0" fill="rgb(233,206,13)" rx="2" ry="2" />
<text  x="71.60" y="95.5" ></text>
</g>
<g >
<title>window_draw_leaf (395 samples, 89.16%)</title><rect x="60.6" y="133" width="1052.2" height="15.0" fill="rgb(245,173,39)" rx="2" ry="2" />
<text  x="63.61" y="143.5" >window_draw_leaf</text>
</g>
<g >
<title>[unknown] (442 samples, 99.77%)</title><rect x="10.0" y="229" width="1177.3" height="15.0" fill="rgb(214,175,52)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >[unknown]</text>
</g>
<g >
<title>compile_regex (1 samples, 0.23%)</title><rect x="92.6" y="53" width="2.6" height="15.0" fill="rgb(239,98,16)" rx="2" ry="2" />
<text  x="95.57" y="63.5" ></text>
</g>
<g >
<title>editor_command_set (1 samples, 0.23%)</title><rect x="1179.3" y="149" width="2.7" height="15.0" fill="rgb(253,95,39)" rx="2" ry="2" />
<text  x="1182.35" y="159.5" ></text>
</g>
<g >
<title>is_word_char (3 samples, 0.68%)</title><rect x="204.4" y="69" width="8.0" height="15.0" fill="rgb(205,89,42)" rx="2" ry="2" />
<text  x="207.45" y="79.5" ></text>
</g>
<g >
<title>_IO_vsnprintf (1 samples, 0.23%)</title><rect x="52.6" y="213" width="2.7" height="15.0" fill="rgb(218,200,32)" rx="2" ry="2" />
<text  x="55.62" y="223.5" ></text>
</g>
<g >
<title>manage_callouts (1 samples, 0.23%)</title><rect x="97.9" y="69" width="2.7" height="15.0" fill="rgb(224,89,6)" rx="2" ry="2" />
<text  x="100.90" y="79.5" ></text>
</g>
<g >
<title>compile_branch (1 samples, 0.23%)</title><rect x="92.6" y="37" width="2.6" height="15.0" fill="rgb(251,139,54)" rx="2" ry="2" />
<text  x="95.57" y="47.5" ></text>
</g>
<g >
<title>__libc_start_main (425 samples, 95.94%)</title><rect x="55.3" y="213" width="1132.0" height="15.0" fill="rgb(239,123,13)" rx="2" ry="2" />
<text  x="58.28" y="223.5" >__libc_start_main</text>
</g>
<g >
<title>gb_linecol_to_pos (7 samples, 1.58%)</title><rect x="1120.7" y="117" width="18.7" height="15.0" fill="rgb(239,222,33)" rx="2" ry="2" />
<text  x="1123.74" y="127.5" ></text>
</g>
<g >
<title>parse_regex (2 samples, 0.45%)</title><rect x="95.2" y="85" width="5.4" height="15.0" fill="rgb(245,37,28)" rx="2" ry="2" />
<text  x="98.24" y="95.5" ></text>
</g>
<g >
<title>main (425 samples, 95.94%)</title><rect x="55.3" y="197" width="1132.0" height="15.0" fill="rgb(249,202,12)" rx="2" ry="2" />
<text  x="58.28" y="207.5" >main</text>
</g>
<g >
<title>__strlen_avx2 (1 samples, 0.23%)</title><rect x="135.2" y="69" width="2.7" height="15.0" fill="rgb(229,47,21)" rx="2" ry="2" />
<text  x="138.19" y="79.5" ></text>
</g>
<g >
<title>editor_draw_window (399 samples, 90.07%)</title><rect x="57.9" y="165" width="1062.8" height="15.0" fill="rgb(234,79,45)" rx="2" ry="2" />
<text  x="60.95" y="175.5" >editor_draw_window</text>
</g>
<g >
<title>__ctype_b_loc (1 samples, 0.23%)</title><rect x="100.6" y="85" width="2.6" height="15.0" fill="rgb(234,68,19)" rx="2" ry="2" />
<text  x="103.56" y="95.5" ></text>
</g>
<g >
<title>is_word_char (2 samples, 0.45%)</title><rect x="1062.1" y="85" width="5.4" height="15.0" fill="rgb(213,107,47)" rx="2" ry="2" />
<text  x="1065.14" y="95.5" ></text>
</g>
<g >
<title>tags_create (1 samples, 0.23%)</title><rect x="55.3" y="165" width="2.6" height="15.0" fill="rgb(234,67,3)" rx="2" ry="2" />
<text  x="58.28" y="175.5" ></text>
</g>
<g >
<title>gb_startswith_at (1 samples, 0.23%)</title><rect x="1059.5" y="85" width="2.6" height="15.0" fill="rgb(246,5,23)" rx="2" ry="2" />
<text  x="1062.48" y="95.5" ></text>
</g>
<g >
<title>gb_startswith_at (7 samples, 1.58%)</title><rect x="185.8" y="69" width="18.6" height="15.0" fill="rgb(236,65,7)" rx="2" ry="2" />
<text  x="188.80" y="79.5" ></text>
</g>
<g >
<title>pcre2_match_8 (318 samples, 71.78%)</title><rect x="212.4" y="69" width="847.1" height="15.0" fill="rgb(214,138,47)" rx="2" ry="2" />
<text  x="215.44" y="79.5" >pcre2_match_8</text>
</g>
<g >
<title>gb_index (3 samples, 0.68%)</title><rect x="159.2" y="53" width="8.0" height="15.0" fill="rgb(219,9,5)" rx="2" ry="2" />
<text  x="162.16" y="63.5" ></text>
</g>
<g >
<title>editor_command_set_impl (1 samples, 0.23%)</title><rect x="1179.3" y="133" width="2.7" height="15.0" fill="rgb(222,185,46)" rx="2" ry="2" />
<text  x="1182.35" y="143.5" ></text>
</g>
<g >
<title>_pcre2_auto_possessify_8 (1 samples, 0.23%)</title><rect x="1179.3" y="101" width="2.7" height="15.0" fill="rgb(241,19,51)" rx="2" ry="2" />
<text  x="1182.35" y="111.5" ></text>
</g>
<g >
<title>gb_pos_to_linecol (17 samples, 3.84%)</title><rect x="1067.5" y="101" width="45.3" height="15.0" fill="rgb(237,49,32)" rx="2" ry="2" />
<text  x="1070.47" y="111.5" >gb_p..</text>
</g>
<g >
<title>escape_regex (1 samples, 0.23%)</title><rect x="55.3" y="133" width="2.6" height="15.0" fill="rgb(235,53,40)" rx="2" ry="2" />
<text  x="58.28" y="143.5" ></text>
</g>
<g >
<title>window_draw (396 samples, 89.39%)</title><rect x="57.9" y="149" width="1054.9" height="15.0" fill="rgb(222,24,37)" rx="2" ry="2" />
<text  x="60.95" y="159.5" >window_draw</text>
</g>
<g >
<title>syntax_init (4 samples, 0.90%)</title><rect x="89.9" y="117" width="10.7" height="15.0" fill="rgb(221,34,3)" rx="2" ry="2" />
<text  x="92.91" y="127.5" ></text>
</g>
<g >
<title>motion_apply (22 samples, 4.97%)</title><rect x="1120.7" y="149" width="58.6" height="15.0" fill="rgb(249,33,1)" rx="2" ry="2" />
<text  x="1123.74" y="159.5" >motion..</text>
</g>
<g >
<title>compile_regex (1 samples, 0.23%)</title><rect x="92.6" y="85" width="2.6" height="15.0" fill="rgb(249,127,7)" rx="2" ry="2" />
<text  x="95.57" y="95.5" ></text>
</g>
<g >
<title>window_pos_to_xy (1 samples, 0.23%)</title><rect x="1112.8" y="149" width="2.6" height="15.0" fill="rgb(209,63,4)" rx="2" ry="2" />
<text  x="1115.75" y="159.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (17 samples, 3.84%)</title><rect x="295.0" y="53" width="45.3" height="15.0" fill="rgb(226,99,28)" rx="2" ry="2" />
<text  x="298.01" y="63.5" >__me..</text>
</g>
<g >
<title>gb_indexof (1 samples, 0.23%)</title><rect x="167.2" y="69" width="2.6" height="15.0" fill="rgb(216,44,29)" rx="2" ry="2" />
<text  x="170.16" y="79.5" ></text>
</g>
<g >
<title>compile_branch (1 samples, 0.23%)</title><rect x="92.6" y="69" width="2.6" height="15.0" fill="rgb(223,55,2)" rx="2" ry="2" />
<text  x="95.57" y="79.5" ></text>
</g>
<g >
<title>gb_index (3 samples, 0.68%)</title><rect x="68.6" y="69" width="8.0" height="15.0" fill="rgb(221,6,51)" rx="2" ry="2" />
<text  x="71.60" y="79.5" ></text>
</g>
<g >
<title>gb_pos_to_linecol (1 samples, 0.23%)</title><rect x="1118.1" y="133" width="2.6" height="15.0" fill="rgb(235,44,54)" rx="2" ry="2" />
<text  x="1121.08" y="143.5" ></text>
</g>
<g >
<title>tb_utf8_char_length (1 samples, 0.23%)</title><rect x="76.6" y="101" width="2.7" height="15.0" fill="rgb(213,96,23)" rx="2" ry="2" />
<text  x="79.59" y="111.5" ></text>
</g>
<g >
<title>__snprintf (1 samples, 0.23%)</title><rect x="1115.4" y="133" width="2.7" height="15.0" fill="rgb(249,7,40)" rx="2" ry="2" />
<text  x="1118.42" y="143.5" ></text>
</g>
<g >
<title>gb_utf8len_line (4 samples, 0.90%)</title><rect x="79.3" y="117" width="10.6" height="15.0" fill="rgb(234,36,32)" rx="2" ry="2" />
<text  x="82.26" y="127.5" ></text>
</g>
<g >
<title>gb_getchar (1 samples, 0.23%)</title><rect x="167.2" y="53" width="2.6" height="15.0" fill="rgb(221,95,26)" rx="2" ry="2" />
<text  x="170.16" y="63.5" ></text>
</g>
<g >
<title>badavi (443 samples, 100.00%)</title><rect x="10.0" y="245" width="1180.0" height="15.0" fill="rgb(209,196,46)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >badavi</text>
</g>
<g >
<title>gb_pos_to_linecol (15 samples, 3.39%)</title><rect x="1139.4" y="117" width="39.9" height="15.0" fill="rgb(231,138,37)" rx="2" ry="2" />
<text  x="1142.39" y="127.5" >gb_..</text>
</g>
<g >
<title>normal_mode_key_pressed (22 samples, 4.97%)</title><rect x="1120.7" y="165" width="58.6" height="15.0" fill="rgb(244,228,28)" rx="2" ry="2" />
<text  x="1123.74" y="175.5" >normal..</text>
</g>
<g >
<title>[unknown] (16 samples, 3.61%)</title><rect x="10.0" y="213" width="42.6" height="15.0" fill="rgb(236,124,11)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >[unk..</text>
</g>
<g >
<title>gb_getstring_into (3 samples, 0.68%)</title><rect x="159.2" y="69" width="8.0" height="15.0" fill="rgb(248,187,10)" rx="2" ry="2" />
<text  x="162.16" y="79.5" ></text>
</g>
<g >
<title>match (256 samples, 57.79%)</title><rect x="377.6" y="53" width="681.9" height="15.0" fill="rgb(245,150,49)" rx="2" ry="2" />
<text  x="380.58" y="63.5" >match</text>
</g>
<g >
<title>gb_getchar (8 samples, 1.81%)</title><rect x="137.9" y="69" width="21.3" height="15.0" fill="rgb(249,196,8)" rx="2" ry="2" />
<text  x="140.86" y="79.5" >g..</text>
</g>
<g >
<title>__strchrnul_avx2 (1 samples, 0.23%)</title><rect x="52.6" y="197" width="2.7" height="15.0" fill="rgb(212,101,32)" rx="2" ry="2" />
<text  x="55.62" y="207.5" ></text>
</g>
<g >
<title>editor_handle_key_press (22 samples, 4.97%)</title><rect x="1120.7" y="181" width="58.6" height="15.0" fill="rgb(247,16,6)" rx="2" ry="2" />
<text  x="1123.74" y="191.5" >editor..</text>
</g>
<g >
<title>gb_index (2 samples, 0.45%)</title><rect x="199.1" y="37" width="5.3" height="15.0" fill="rgb(238,207,50)" rx="2" ry="2" />
<text  x="202.12" y="47.5" ></text>
</g>
<g >
<title>pcre2_compile_8 (1 samples, 0.23%)</title><rect x="1179.3" y="117" width="2.7" height="15.0" fill="rgb(222,50,25)" rx="2" ry="2" />
<text  x="1182.35" y="127.5" ></text>
</g>
<g >
<title>gb_getchar (4 samples, 0.90%)</title><rect x="193.8" y="53" width="10.6" height="15.0" fill="rgb(222,115,10)" rx="2" ry="2" />
<text  x="196.79" y="63.5" ></text>
</g>
<g >
<title>_pcre2_study_8 (1 samples, 0.23%)</title><rect x="89.9" y="85" width="2.7" height="15.0" fill="rgb(236,119,48)" rx="2" ry="2" />
<text  x="92.91" y="95.5" ></text>
</g>
<g >
<title>tb_render (6 samples, 1.35%)</title><rect x="10.0" y="197" width="16.0" height="15.0" fill="rgb(238,117,50)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>gb_getchar (2 samples, 0.45%)</title><rect x="81.9" y="101" width="5.3" height="15.0" fill="rgb(215,127,38)" rx="2" ry="2" />
<text  x="84.92" y="111.5" ></text>
</g>
</g>
</svg>
